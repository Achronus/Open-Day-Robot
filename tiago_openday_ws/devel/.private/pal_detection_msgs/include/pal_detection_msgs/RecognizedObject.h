// Generated by gencpp from file pal_detection_msgs/RecognizedObject.msg
// DO NOT EDIT!


#ifndef PAL_DETECTION_MSGS_MESSAGE_RECOGNIZEDOBJECT_H
#define PAL_DETECTION_MSGS_MESSAGE_RECOGNIZEDOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/RegionOfInterest.h>

namespace pal_detection_msgs
{
template <class ContainerAllocator>
struct RecognizedObject_
{
  typedef RecognizedObject_<ContainerAllocator> Type;

  RecognizedObject_()
    : object_class()
    , confidence(0.0)
    , bounding_box()  {
    }
  RecognizedObject_(const ContainerAllocator& _alloc)
    : object_class(_alloc)
    , confidence(0.0)
    , bounding_box(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_class_type;
  _object_class_type object_class;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _bounding_box_type;
  _bounding_box_type bounding_box;





  typedef boost::shared_ptr< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> const> ConstPtr;

}; // struct RecognizedObject_

typedef ::pal_detection_msgs::RecognizedObject_<std::allocator<void> > RecognizedObject;

typedef boost::shared_ptr< ::pal_detection_msgs::RecognizedObject > RecognizedObjectPtr;
typedef boost::shared_ptr< ::pal_detection_msgs::RecognizedObject const> RecognizedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pal_detection_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'pal_detection_msgs': ['/home/lewis/tiago_openday_ws/src/pal_msgs/pal_detection_msgs/msg', '/home/lewis/tiago_openday_ws/devel/.private/pal_detection_msgs/share/pal_detection_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac3fbc481abe751cad38199e3707858d";
  }

  static const char* value(const ::pal_detection_msgs::RecognizedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac3fbc481abe751cULL;
  static const uint64_t static_value2 = 0xad38199e3707858dULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_detection_msgs/RecognizedObject";
  }

  static const char* value(const ::pal_detection_msgs::RecognizedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Contains information about the class of a found object, along with its confidence and ROI of detection\n"
"\n"
"# class: The respective class type of the found object\n"
"string object_class\n"
"\n"
"# confidence: how sure you are it is that object and not another one.\n"
"# It is between 0 and 1 and the closer to one it is the better\n"
"float32 confidence\n"
"\n"
"# bounding_box: The region of the image, where the object is found\n"
"sensor_msgs/RegionOfInterest bounding_box\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
;
  }

  static const char* value(const ::pal_detection_msgs::RecognizedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_class);
      stream.next(m.confidence);
      stream.next(m.bounding_box);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecognizedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_detection_msgs::RecognizedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_detection_msgs::RecognizedObject_<ContainerAllocator>& v)
  {
    s << indent << "object_class: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_class);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "bounding_box: ";
    s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_box);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_DETECTION_MSGS_MESSAGE_RECOGNIZEDOBJECT_H
